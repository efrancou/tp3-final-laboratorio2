{"ast":null,"code":"var _jsxFileName = \"/home/hola/Escritorio/laboratorio final/src/components/ApiCrud.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { helpHttp } from \"../Helpers/helphttp\";\nimport AplicacionCrudForm from \"./AplicacionCrudForm\";\nimport AplicacionCrudTable from \"./AplicacionCrudTable\";\nimport MessageApi from \"./MessageApi\";\nimport \"./hola.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ApiCrud = () => {\n  _s();\n\n  // se inicializa bacia \n  const [db, setDb] = useState([]);\n  const [dataToEdit, setDataToEdit] = useState(null);\n  const [error, setError] = useState(null); //si es null, va a ser una insercion, sino es una edicion\n\n  const [loading, setLoading] = useState(false); // se invoca helpHttp\n\n  let api = helpHttp(); // se define el endpoint\n\n  let url = \"http://localhost:3000/contactos\"; //mostamos la respuesta en la UI\n\n  useEffect(() => {\n    //actualiza la variable setLoading a VERDADERO  para que se vea\n    setLoading(true); //usamos el metodo GET del Helper\n\n    helpHttp().get(url).then(res => {\n      //cuando la respuesta no tenga una propiedad llamada error, actualizará la variable db con la respuesta arrojada por la petición\n      if (!res.err) {\n        setDb(res); //si no salto error, la variable se pasa a null\n\n        setError(null);\n      } else {\n        //si hay un error en la bbdd la misma no se mostrara\n        setDb(null);\n        setError(res);\n      } //al terminar la peticion GET vuelve a falso\n\n\n      setLoading(false);\n    });\n  }, [url]);\n\n  const createData = data => {\n    data.id = Date.now(); //para crear un id en el campo\n\n    let options = {\n      body: data,\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    };\n    api.post(url, options).then(res => {\n      console.log(res);\n\n      if (!res.err) {\n        setDb([...db, res]);\n      } else {\n        setError(res);\n      }\n    }); //trae la base de datos como esta\n  };\n\n  const updateData = data => {\n    let endpoint = `${url}/${data.id}`;\n    console.log(endpoint);\n    let options = {\n      body: data,\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    };\n    api.put(endpoint, options).then(res => {\n      console.log(res);\n\n      if (!res.error) {\n        let newData = db.map(el => el.id === data.id ? data : el);\n        setDb([...db, res]);\n        setDb(newData);\n      } else {\n        setError(res);\n      }\n    }); //trae la base de datos como esta\n  }; // let newData= db.map(el=>el.id ===dato.id? data:el);\n  // setDb(newData);\n\n\n  const deleteData = id => {\n    let isDelete = window.confirm(`¿Estás seguro de eliminar el registro con el id '${id}'?`);\n\n    if (isDelete) {\n      let endpoint = `${url}/${id}`;\n      let options = {\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      };\n      api.del(endpoint, options).then(res => {\n        //console.log(res);\n        if (!res.err) {\n          let newData = db.filter(el => el.id !== id);\n          setDb(newData);\n        } else {\n          setError(res);\n        }\n      });\n    } else {\n      return;\n    }\n  }; //     const deleteData = (id) => {\n  //         let isDelete = window.confirm(\n  //       `¿Estás seguro de eliminar el registro con el id '${id}'?`\n  //     );\n  //     if (isDelete) {\n  //       let newData = db.filter((el)=>el.id!==id);\n  //       setDb(newData);\n  //       }else{\n  //         return;\n  //     };\n  //   }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"hola\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      class: \"hola\",\n      children: \" Nuevo Morosos \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AplicacionCrudForm, {\n      createData: createData,\n      updateData: updateData,\n      dataToEdit: dataToEdit,\n      setDataToEdit: setDataToEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), loading, error && /*#__PURE__*/_jsxDEV(MessageApi, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(AplicacionCrudTable, {\n      data: db,\n      deleteData: deleteData //funcion que actualiza la variable, deleteData\n      ,\n      setDataToEdit: setDataToEdit //funcion que actualiza la variable, setDataToEdit\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ApiCrud, \"TwSIai2mKj90y7R17ni/9i+jG+g=\");\n\n_c = ApiCrud;\nexport default ApiCrud;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiCrud\");","map":{"version":3,"sources":["/home/hola/Escritorio/laboratorio final/src/components/ApiCrud.js"],"names":["React","useEffect","useState","helpHttp","AplicacionCrudForm","AplicacionCrudTable","MessageApi","ApiCrud","db","setDb","dataToEdit","setDataToEdit","error","setError","loading","setLoading","api","url","get","then","res","err","createData","data","id","Date","now","options","body","headers","post","console","log","updateData","endpoint","put","newData","map","el","deleteData","isDelete","window","confirm","del","filter"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from \"react\";\nimport { helpHttp } from \"../Helpers/helphttp\";\nimport AplicacionCrudForm from \"./AplicacionCrudForm\";\nimport AplicacionCrudTable from \"./AplicacionCrudTable\";\nimport MessageApi from \"./MessageApi\";\nimport \"./hola.css\"\n\n\n\nconst ApiCrud = () => {\n    // se inicializa bacia \n    const [db,setDb] = useState([]);\n\n    const [dataToEdit,setDataToEdit] = useState(null);\n\n    const [error,setError] = useState(null);\n    //si es null, va a ser una insercion, sino es una edicion\n    const [loading, setLoading] = useState(false);\n    // se invoca helpHttp\n    let api=helpHttp();\n    // se define el endpoint\n    let url= \"http://localhost:3000/contactos\";\n\n    //mostamos la respuesta en la UI\n    useEffect(()=>{\n        //actualiza la variable setLoading a VERDADERO  para que se vea\n            setLoading(true);\n        //usamos el metodo GET del Helper\n            helpHttp().get(url).then((res)=>{\n        //cuando la respuesta no tenga una propiedad llamada error, actualizará la variable db con la respuesta arrojada por la petición\n                if(!res.err){\n                    setDb(res)\n        //si no salto error, la variable se pasa a null\n                    setError(null);\n                }else{\n        //si hay un error en la bbdd la misma no se mostrara\n                    setDb(null);\n                    setError(res)\n                }\n        //al terminar la peticion GET vuelve a falso\n            setLoading(false);\n            });\n            },[url]);\n    \n\n    const createData =(data)=>{\n        data.id= Date.now(); //para crear un id en el campo\n        let options={\n            body:data,\n            headers:{\"content-type\":\"application/json\"},\n        };\n        api.post(url,options).then(res=>{\n            console.log(res);\n            if(!res.err){\n                setDb([...db,res ])\n            }else{\n                setError(res);\n            }\n        });\n        \n        //trae la base de datos como esta\n\n    };\n    const updateData =(data)=>{\n        let endpoint =`${url}/${data.id}`;\n        console.log(endpoint);\n\n        let options={\n            body:data,\n            headers:{\"content-type\":\"application/json\"},\n        };\n        api.put(endpoint,options).then((res)=>{\n            console.log(res);\n            if(!res.error){\n                let newData= db.map(el=>el.id ===data.id? data:el);\n                setDb([...db,res ]);\n                setDb(newData);\n            }else{\n                setError(res)\n            }\n            \n        });\n        //trae la base de datos como esta\n\n    };\n    // let newData= db.map(el=>el.id ===dato.id? data:el);\n    // setDb(newData);\n\n\n    const deleteData = (id) => {\n      let isDelete = window.confirm(`¿Estás seguro de eliminar el registro con el id '${id}'?`);\n      if (isDelete) {\n          let endpoint = `${url}/${id}`;\n          let options = {\n          headers: { \"content-type\": \"application/json\" },\n        };\n  \n        api.del(endpoint, options).then((res) => {\n          //console.log(res);\n          if (!res.err) {\n            let newData = db.filter((el) => el.id !== id);\n            setDb(newData);\n          } else {\n            setError(res);\n          }\n        });\n      } else {\n        return;\n      }\n    };\n//     const deleteData = (id) => {\n//         let isDelete = window.confirm(\n//       `¿Estás seguro de eliminar el registro con el id '${id}'?`\n//     );\n\n//     if (isDelete) {\n//       let newData = db.filter((el)=>el.id!==id);\n//       setDb(newData);\n//       }else{\n//         return;\n//     };\n//   }\n    return(\n        <div class=\"hola\">\n            <h2 class=\"hola\"> Nuevo Morosos </h2>\n            <AplicacionCrudForm\n            createData = {createData}\n            updateData = {updateData}\n            dataToEdit = {dataToEdit}\n            setDataToEdit={setDataToEdit}\n            />\n            {loading} \n            {error&& <MessageApi/>}\n            <AplicacionCrudTable\n            data={db}\n            deleteData={deleteData}//funcion que actualiza la variable, deleteData\n            setDataToEdit={setDataToEdit}//funcion que actualiza la variable, setDataToEdit\n            />\n\n        </div>\n    )\n\n}\n\nexport default ApiCrud;"]},"metadata":{},"sourceType":"module"}